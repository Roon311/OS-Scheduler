//#include "../Data_Structures/MessageStruct.h"
#include "../headers.h"
//-----------------------------------------------Variables----------------------------------------------------------//

// the up queue ID
/////+++++++ msg queue id is in header int msgqupid=152001;
int completed=0; //number of completed processes
int current_time=0;//will be setted with the clock 
int t_count;
//Ready Queue of size of 1Process * t_count assumption Total Number of process t_count
//------------------------------------------------------------------------------------------------------------------//






//-------------------------------------------Function Headers-------------------------------------------------------//

//------------------------------------------------------------------------------------------------------------------//







//----------------------------------------Functions' implementations------------------------------------------------//
/*Content
1-Receive Process
2-
*/
//********************************************ReceiveProcess********************************************************//
//Receive the sent process
//1- assumptions up queue ID is msgqupid
//2- assumption Total Number of process t_count
//3-readyQ is readyQueue for this algorithm
int ReceiveProcess() 
{
    struct msgbuff message; //create a message
    int rec_val;//int for the receive value "-1" means nothing received 
    printf("\n Receiving from process generator starting\n\n");
    rec_val = msgrcv(msgqupid, &message, sizeof(message.p), 0, IPC_NOWAIT);//receive a message No waiting if a message is not found  
    if(rec_val == -1)//if no process is received
    {
        perror("Error in receiving"); //for debugging, print error in receiving 
        return -1;
    }
    else // a process is received
    {
        printf("\nProcess received \n\n");  // for debugging, print that the process is received 
        //process* readyQ= (process*)malloc(sizeof(process)*t_count );
        process* ptbp= (process*)malloc(sizeof(process)); //ptbp process to be pushed
        while (!ptbp) 
        {
            perror("Allocation failed");
            ptbp =(process*) malloc(sizeof(process));
        }
        *ptbp = message.p; //store the process received in the allocated space by dereferencing and equating
        //HeapPush(readyQ, ptbp->mRemainTime, ptbp); //push the  pointer to readyQ and sort by RemainingTime"Priority"
        return 0;
    }
}


//------------------------------------------------------------------------------------------------------------------//
