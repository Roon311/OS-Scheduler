#ifndef PriorityQueue_H
#define PriorityQueue_H
#include <stdio.h>
#include <stdlib.h>
#include "../headers.h"


typedef struct node_priority_ {
   process process;
   int priority;
   struct node_priority_* next;
} node_priority;

node_priority* newNode(process prs, int priority) {
   node_priority* temp = (node_priority*)malloc(sizeof(node_priority));
   temp->process = prs;
   temp->priority = priority;
   temp->next = NULL;
   return temp;
}

process peek(node_priority** head) {
   return (*head)->process;
}

void pop(node_priority** head) {
   node_priority* temp = *head;
   (*head) = (*head)->next;
   free(temp);
}
void push(node_priority** head, int priority,process prs ) {
   node_priority* start = (*head);
   node_priority* temp = newNode(prs, priority);
   if ((*head)->priority > priority) {
      temp->next = *head;
      (*head) = temp;
   } else {
      while (start->next != NULL && start->next->priority < priority) {
         start = start->next;
      }
      // Either at the ends of the list
      // or at required position
      temp->next = start->next;
      start->next = temp;
   }
}
// Function to check the queue is empty
int isEmpty(node_priority** head) {
   return (*head) == NULL;
}
// main function

#endif
