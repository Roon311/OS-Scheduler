#ifndef pcb_linked_list_H
#define pcb_linked_list_H
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include "../headers.h"
#include <stddef.h>






struct node
{
    process info;
    struct node *next;
};

struct node *start=NULL;


void display()
{
        struct node *ptr;
        if(start==NULL)
        {
                printf("\nList is empty:\n");
                return;
        }
        else
        {
                ptr=start;
                printf("\nThe List elements are:\n");
                while(ptr!=NULL)
                {
                        printf("%d \n",ptr->info.identity );
                        ptr=ptr->next ;
                }
        }
}


void insert_begin(process p)
{
        struct node *temp;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("nOut of Memory Space:n");
                return;
        }
        temp->info=p;
        temp->next =NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                temp->next=start;
                start=temp;
        }
}
void insert_end(process p)
{
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
                printf("nOut of Memory Space:n");
                return;
        }
        temp->info=p;
        temp->next =NULL;
        if(start==NULL)
        {
                start=temp;
        }
        else
        {
                ptr=start;
                while(ptr->next !=NULL)
                {
                        ptr=ptr->next ;
                }
                ptr->next =temp;
        }
}

void delete_begin()
{
        struct node *ptr;
        if(ptr==NULL)
        {
                printf("nList is Empty:n");
                return;
        }
        else
        {
                ptr=start;
                start=start->next ;
                printf("nThe deleted element is :%dt",ptr->info.identity);
                free(ptr);
        }
}

void delete_pos(int pos)
{
        int i;
        struct node *temp,*ptr;
        if(start==NULL)
        {
                printf("nThe List is Empty:n");
                exit(0);
        }
        else
        {
                if(pos==0)
                {
                        ptr=start;
                        start=start->next ;
                        printf("\nThe deleted element is:%d \n",ptr->info.identity  );
                        free(ptr);
                }
                else
                {
                        ptr=start;
                        for(i=0;i<pos;i++) { temp=ptr; ptr=ptr->next ;
                                if(ptr==NULL)
                                {
                                        printf("\nPosition not Found:\n");
                                        return;
                                }
                        }
                        temp->next =ptr->next ;
                        printf("\nThe deleted element is:%d\n",ptr->info.identity );
                        free(ptr);
                }
        }
}


void delete_end()
{
        struct node *temp,*ptr;
        if(start==NULL)
        {
                printf("\nList is Empty:");
                exit(0);
        }
        else if(start->next ==NULL)
        {
                ptr=start;
                start=NULL;
                printf("\nThe deleted element is:%d \n",ptr->info.identity);
                free(ptr);
        }
        else
        {
                ptr=start;
                while(ptr->next!=NULL)
                {
                        temp=ptr;
                        ptr=ptr->next;
                }
                temp->next=NULL;
                printf("\nThe deleted element is:%d \n",ptr->info.identity);
                free(ptr);
        }
}



void send_new_process_to_schedular(int cur_time)
{       
        int g_q_key=152001;
        struct node *ptr;
        if(start==NULL)
        {
                printf("\nList is empty:\n");
                return;
        }
        else
        {
                ptr=start;
                printf("\nThe List elements are:\n");
                printf("curr time from pcb: %d \n",cur_time);
                int pos=0;
                while(ptr!=NULL)
                {
                        
                        if(ptr->info.arrival_time==cur_time)
                        {       
                                printf("i will send process with ID %d, equal to: at time: %d \n",ptr->info.identity , cur_time);
                                struct msgbuff msg;
                                msg.mtype=0;
                                msg.p=ptr->info;
                                int send_val=msgsnd(g_q_key, &msg, sizeof(msg.p), !IPC_NOWAIT);
                                // delete_pos(pos); //Etakd en mfysh seneh 3
                        }
                        pos=pos +1;
                        ptr=ptr->next ;
                }
        }
}

#endif